{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Output","props","htmlSrc","mdSrc","logo","status","toString","toLowerCase","name","replace","color","style","Row","className","src","alt","Generator","state","isShow","handleChange","bind","handleToggle","handleClick","handleColorPicke","event","this","setState","target","value","currentTarget","getAttribute","setColor","slice","lists","Data","map","d","Button","variant","onClick","id","Form","Group","as","Label","column","sm","Col","Control","readOnly","placeholder","htmlFor","Select","onChange","type","Modal","show","onHide","Header","closeButton","Title","Body","Footer","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95342b9d.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Col, Form, Modal, Row } from 'react-bootstrap';\nimport './index.scss';\nimport Data from './data.json';\n\nfunction Output(props) {\n  let htmlSrc = 'https://img.shields.io/badge/';\n  let mdSrc = 'https://img.shields.io/badge/';\n  let logo = props.status.toString().toLowerCase();\n  let name = props.status.replace(/ /g, \"&nbsp;\");\n\n  logo = logo.replace(/ /g, \"-\");\n  logo = logo.replace('++', \"%2b%2b\");\n\n  htmlSrc += props.status + '-' + props.color + '.svg?logo=' + logo + '&style=' + props.style;\n  mdSrc += name + '-' + props.color + '.svg?logo=' + logo + '&style=' + props.style;\n\n  return (\n    <Row className=\"output-area\">\n      <figure className=\"badge\">\n        <img src={htmlSrc} alt={props.status} />\n      </figure>\n\n      <div className=\"src-title\">\n        <p>HTML</p>\n      </div>\n      <pre className=\"src-space\">\n        <code>&lt;img src=\"{htmlSrc}\" /&gt;</code>\n      </pre>\n      <div className=\"src-title\">\n        <p>Markdown</p>\n      </div>\n      <pre className=\"src-space\">\n        <code>![{props.status}]({mdSrc})</code>\n      </pre>\n    </Row>\n  );\n}\n\nexport default class Generator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isShow: false,\n      status: 'React',\n      color: '20232a',\n      style: 'flat'\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleColorPicke = this.handleColorPicke.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ style: event.target.value });\n  }\n\n  handleToggle() {\n    this.setState({ isShow: !this.state.isShow });\n  }\n\n  handleClick(event) {\n    this.setState({\n      status: event.currentTarget.name,\n      color: event.currentTarget.getAttribute('data-color'),\n      isShow: !this.state.isShow\n    });\n  }\n\n  handleColorPicke(event) {\n    const setColor = event.currentTarget.value.slice(1);\n    this.setState({ color: setColor });\n  }\n\n  render() {\n    const lists = Data.map((d) =>\n      <Button className=\"col-sm-3 m-1\" variant=\"outline-primary\" key={d.id} name={d.name} data-color={d.color} onClick={this.handleClick}>\n        <p className=\"align-center m-0\">{d.name}</p>\n      </Button>\n    );\n\n    return (\n      <main className=\"container-fluid\">\n        <Form className=\"my-5\">\n          <Form.Group as={Row} className=\"form-row\">\n            <Form.Label column sm=\"2\">Icon</Form.Label>\n            <Col sm=\"8\">\n              <Form.Control readOnly id=\"logo\" name=\"logo\" placeholder={this.state.status} />\n            </Col>\n            <Col sm=\"2\">\n              <Button key=\"modal\" variant=\"outline-secondary\" onClick={this.handleToggle}>Select</Button>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} className=\"form-row\">\n            <Form.Label column sm=\"2\" htmlFor=\"style\">Style</Form.Label>\n            <Col sm=\"6\">\n              <Form.Select id=\"style\" name=\"style\" value={this.state.style} onChange={this.handleChange}>\n                <option value=\"plastic\">plastic</option>\n                <option value=\"flat\">flat</option>\n                <option value=\"flat-square\">flat-square</option>\n                <option value=\"for-the-badge\">for-the-badge</option>\n                <option value=\"social\">social</option>\n              </Form.Select>\n            </Col>\n            <Form.Label column sm=\"2\" htmlFor=\"color\">Color</Form.Label>\n            <Col sm=\"2\">\n              <Form.Control id=\"color\" name=\"color\" type=\"color\" value={'#' + this.state.color} onChange={this.handleColorPicke} />\n            </Col>\n          </Form.Group>\n        </Form>\n\n        <>\n          <Modal show={this.state.isShow} onHide={this.handleToggle}>\n            <Modal.Header closeButton>\n              <Modal.Title>Select</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <Row className=\"justify-content-around\">\n                {lists}\n              </Row>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={this.handleToggle}>\n                Close\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </>\n\n        <Output\n          status={this.state.status}\n          color={this.state.color}\n          style={this.state.style}\n        />\n      </main >\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}