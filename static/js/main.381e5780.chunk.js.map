{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Output","props","imgSrc","logo","status","toString","toLowerCase","replace","color","style","Row","className","src","alt","Generator","state","isShow","handleChange","bind","handleToggle","handleClick","handleColorPicke","event","this","setState","target","value","currentTarget","name","getAttribute","setColor","slice","lists","Data","map","d","Button","variant","onClick","id","Form","Group","as","Label","column","sm","Col","Control","readOnly","placeholder","htmlFor","Select","onChange","type","Modal","show","onHide","Header","closeButton","Title","Body","Footer","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.381e5780.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Col, Form, Modal, Row } from 'react-bootstrap';\r\nimport './index.scss';\r\nimport Data from './data.json';\r\n\r\nfunction Output(props) {\r\n  let imgSrc = 'https://img.shields.io/badge/';\r\n  let logo = props.status.toString().toLowerCase();\r\n\r\n  logo = logo.replace(/ /g, \"-\");\r\n  logo = logo.replace('++', \"%2b%2b\");\r\n\r\n  imgSrc += props.status + '-' + props.color + '.svg?logo=' + logo + '&style=' + props.style;\r\n\r\n  return (\r\n    <Row className=\"output-area\">\r\n      <figure className=\"badge\">\r\n        <img src={imgSrc} alt={props.status} />\r\n      </figure>\r\n\r\n      <div className=\"src-title\">\r\n        <p>HTML</p>\r\n      </div>\r\n      <pre className=\"src-space\">\r\n        <code>&lt;img src=\"{imgSrc}\" /&gt;</code>\r\n      </pre>\r\n      <div className=\"src-title\">\r\n        <p>Markdown</p>\r\n      </div>\r\n      <pre className=\"src-space\">\r\n        <code>![{props.status}]({imgSrc})</code>\r\n      </pre>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default class Generator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isShow: false,\r\n      status: 'React',\r\n      color: '20232a',\r\n      style: 'flat'\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleColorPicke = this.handleColorPicke.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ style: event.target.value });\r\n  }\r\n\r\n  handleToggle() {\r\n    this.setState({ isShow: !this.state.isShow });\r\n  }\r\n\r\n  handleClick(event) {\r\n    this.setState({\r\n      status: event.currentTarget.name,\r\n      color: event.currentTarget.getAttribute('data-color'),\r\n      isShow: !this.state.isShow\r\n    });\r\n  }\r\n\r\n  handleColorPicke(event) {\r\n    const setColor = event.currentTarget.value.slice(1);\r\n    this.setState({ color: setColor });\r\n  }\r\n\r\n  render() {\r\n    const lists = Data.map((d) =>\r\n      <Button className=\"col-sm-3 m-1\" variant=\"outline-primary\" key={d.id} name={d.name} data-color={d.color} onClick={this.handleClick}>\r\n        <p className=\"align-center m-0\">{d.name}</p>\r\n      </Button>\r\n    );\r\n\r\n    return (\r\n      <main className=\"container-fluid\">\r\n        <Form className=\"my-5\">\r\n          <Form.Group as={Row} className=\"form-row\">\r\n            <Form.Label column sm=\"2\">Icon</Form.Label>\r\n            <Col sm=\"8\">\r\n              <Form.Control readOnly id=\"logo\" name=\"logo\" placeholder={this.state.status} />\r\n            </Col>\r\n            <Col sm=\"2\">\r\n              <Button key=\"modal\" variant=\"outline-secondary\" onClick={this.handleToggle}>Select</Button>\r\n            </Col>\r\n          </Form.Group>\r\n          <Form.Group as={Row} className=\"form-row\">\r\n            <Form.Label column sm=\"2\" htmlFor=\"style\">Style</Form.Label>\r\n            <Col sm=\"6\">\r\n              <Form.Select id=\"style\" name=\"style\" value={this.state.style} onChange={this.handleChange}>\r\n                <option value=\"plastic\">plastic</option>\r\n                <option value=\"flat\">flat</option>\r\n                <option value=\"flat-square\">flat-square</option>\r\n                <option value=\"for-the-badge\">for-the-badge</option>\r\n                <option value=\"social\">social</option>\r\n              </Form.Select>\r\n            </Col>\r\n            <Form.Label column sm=\"2\" htmlFor=\"color\">Color</Form.Label>\r\n            <Col sm=\"2\">\r\n              <Form.Control id=\"color\" name=\"color\" type=\"color\" value={'#' + this.state.color} onChange={this.handleColorPicke} />\r\n            </Col>\r\n          </Form.Group>\r\n        </Form>\r\n\r\n        <>\r\n          <Modal show={this.state.isShow} onHide={this.handleToggle}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Select</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Row className=\"justify-content-around\">\r\n                {lists}\r\n              </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={this.handleToggle}>\r\n                Close\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </>\r\n\r\n        <Output\r\n          status={this.state.status}\r\n          color={this.state.color}\r\n          style={this.state.style}\r\n        />\r\n      </main >\r\n    );\r\n  }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}